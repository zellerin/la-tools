#+TITLE: Redoing ML exercises in CL

Some time ago, I took a course on ML with examples in
Octave/Matlab. This repository tries to redo the stuff in Common Lisp.

1. Linear algebra - I need linear combinations and matrix (including
   row and column vector) multiplication. I met quite a few LA
   libraries, some native, some using FFI, and most of them is a bit
   too complicated. Also, I wanted to get a feeling on speed of simple
   code.

This is speed test with current machine (HP notebook), sbcl,
 and safety level in the code 2
#+BEGIN_SRC lisp :package linear-algebra
(with-output-to-string (*trace-output*) (speed-test))
#+END_SRC

#+RESULTS:
#+begin_example

"generic 500x500 x 500x500"
Evaluation took:
  3.899 seconds of real time
  3.892761 seconds of total run time (3.892761 user, 0.000000 system)
  99.85% CPU
  9,335,597,886 processor cycles
  2,000,016 bytes consed


"single float 500x500 x 500x500"
Evaluation took:
  0.352 seconds of real time
  0.351598 seconds of total run time (0.351598 user, 0.000000 system)
  100.00% CPU
  843,242,727 processor cycles
  1,000,016 bytes consed


"single float 500x500 x 500x499"
Evaluation took:
  0.844 seconds of real time
  0.842978 seconds of total run time (0.842978 user, 0.000000 system)
  99.88% CPU
  2,021,698,665 processor cycles
  998,016 bytes consed

#+end_example

To compare, here is similar result with safety 0 on HP machine
#+BEGIN_SRC lisp :package linear-algebra
(with-output-to-string (*trace-output*)
  (speed-test))
#+END_SRC

#+RESULTS:
#+begin_example
Evaluation took:
  2.832 seconds of real time
  2.827234 seconds of total run time (2.827234 user, 0.000000 system)
  99.82% CPU
  6,780,825,048 processor cycles
  2,000,016 bytes consed

Evaluation took:
  0.199 seconds of real time
  0.198204 seconds of total run time (0.198204 user, 0.000000 system)
  99.50% CPU
  475,382,718 processor cycles
  1,000,016 bytes consed

Evaluation took:
  0.285 seconds of real time
  0.284544 seconds of total run time (0.284544 user, 0.000000 system)
  100.00% CPU
  682,432,197 processor cycles
  998,016 bytes consed

#+end_example



2. Linear and logistic regression -

#+NAME: ex1-data
#+BEGIN_SRC lisp :results table output
  (multiple-value-bind (s x y) (read-comma-file)
    (declare (ignore s))
    (print (mapcar 'list x y)))
#+END_SRC

#+RESULTS: ex1-data
| 6.1101 |   17.592 |
| 5.5277 |   9.1302 |
| 8.5186 |   13.662 |
| 7.0032 |   11.854 |
| 5.8598 |   6.8233 |
| 8.3829 |   11.886 |
| 7.4764 |   4.3483 |
| 8.5781 |       12 |
| 6.4862 |   6.5987 |
| 5.0546 |   3.8166 |
| 5.7107 |   3.2522 |
| 14.164 |   15.505 |
|  5.734 |   3.1551 |
| 8.4084 |   7.2258 |
| 5.6407 |  0.71618 |
| 5.3794 |   3.5129 |
| 6.3654 |   5.3048 |
| 5.1301 |  0.56077 |
| 6.4296 |   3.6518 |
| 7.0708 |   5.3893 |
| 6.1891 |   3.1386 |
|  20.27 |   21.767 |
| 5.4901 |    4.263 |
| 6.3261 |   5.1875 |
| 5.5649 |   3.0825 |
| 18.945 |   22.638 |
| 12.828 |   13.501 |
| 10.957 |   7.0467 |
| 13.176 |   14.692 |
| 22.203 |   24.147 |
| 5.2524 |    -1.22 |
| 6.5894 |   5.9966 |
| 9.2482 |   12.134 |
| 5.8918 |   1.8495 |
| 8.2111 |   6.5426 |
| 7.9334 |   4.5623 |
| 8.0959 |   4.1164 |
| 5.6063 |   3.3928 |
| 12.836 |   10.117 |
| 6.3534 |   5.4974 |
| 5.4069 |  0.55657 |
| 6.8825 |   3.9115 |
| 11.708 |   5.3854 |
| 5.7737 |   2.4406 |
| 7.8247 |   6.7318 |
| 7.0931 |   1.0463 |
| 5.0702 |   5.1337 |
| 5.8014 |    1.844 |
|   11.7 |   8.0043 |
| 5.5416 |   1.0179 |
| 7.5402 |   6.7504 |
| 5.3077 |   1.8396 |
| 7.4239 |   4.2885 |
| 7.6031 |   4.9981 |
| 6.3328 |   1.4233 |
| 6.3589 |  -1.4211 |
| 6.2742 |   2.4756 |
| 5.6397 |   4.6042 |
| 9.3102 |   3.9624 |
| 9.4536 |   5.4141 |
| 8.8254 |   5.1694 |
| 5.1793 | -0.74279 |
| 21.279 |   17.929 |
| 14.908 |   12.054 |
| 18.959 |   17.054 |
| 7.2182 |   4.8852 |
| 8.2951 |   5.7442 |
| 10.236 |   7.7754 |
| 5.4994 |   1.0173 |
| 20.341 |   20.992 |
| 10.136 |   6.6799 |
| 7.3345 |   4.0259 |
| 6.0062 |   1.2784 |
| 7.2259 |   3.3411 |
| 5.0269 |  -2.6807 |
| 6.5479 |  0.29678 |
| 7.5386 |   3.8845 |
| 5.0365 |   5.7014 |
| 10.274 |   6.7526 |
| 5.1077 |   2.0576 |
| 5.7292 |  0.47953 |
| 5.1884 |  0.20421 |
| 6.3557 |  0.67861 |
| 9.7687 |   7.5435 |
| 6.5159 |   5.3436 |
| 8.5172 |   4.2415 |
| 9.1802 |   6.7981 |
|  6.002 |  0.92695 |
| 5.5204 |    0.152 |
| 5.0594 |   2.8214 |
| 5.7077 |   1.8451 |
| 7.6366 |   4.2959 |
| 5.8707 |   7.2029 |
| 5.3054 |   1.9869 |
| 8.2934 |  0.14454 |
| 13.394 |   9.0551 |
| 5.4369 |  0.61705 |

#+BEGIN_SRC gnuplot :exports code :file file.svg :var data=ex1-data
set xlabel "Population (in 10 000)"
set ylabel "Profit (in 10 000 USD)"
set key box linestyle -1 right bottom
plot data title "Training data", -3.902+1.1927*x title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:file.svg]]
