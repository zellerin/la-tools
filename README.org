#+TITLE: Redoing ML exercises in CL

Some time ago, I took a course on ML with examples in
Octave/Matlab. This repository tries to redo the stuff in Common Lisp.

* Linear algebra
I need linear combinations and matrix (including
   row and column vector) multiplication. I met quite a few LA
   libraries, some native, some using FFI, and most of them is a bit
   too complicated. Also, I wanted to get a feeling on speed of simple
   code.

** Speed test
This is speed test with current machine (HP notebook), sbcl,
 and safety level in the code 2
#+BEGIN_SRC lisp :package linear-algebra :exports both
(with-output-to-string (*trace-output*) (speed-test))
#+END_SRC

#+RESULTS:
#+begin_example

"generic 500x500 x 500x500"
Evaluation took:
  3.899 seconds of real time
  3.892761 seconds of total run time (3.892761 user, 0.000000 system)
  99.85% CPU
  9,335,597,886 processor cycles
  2,000,016 bytes consed


"single float 500x500 x 500x500"
Evaluation took:
  0.352 seconds of real time
  0.351598 seconds of total run time (0.351598 user, 0.000000 system)
  100.00% CPU
  843,242,727 processor cycles
  1,000,016 bytes consed


"single float 500x500 x 500x499"
Evaluation took:
  0.844 seconds of real time
  0.842978 seconds of total run time (0.842978 user, 0.000000 system)
  99.88% CPU
  2,021,698,665 processor cycles
  998,016 bytes consed

#+end_example

To compare, here is similar result with safety 0 on HP machine
#+BEGIN_SRC lisp :package linear-algebra
(with-output-to-string (*trace-output*)
  (speed-test))
#+END_SRC

#+RESULTS:
#+begin_example
Evaluation took:
  2.832 seconds of real time
  2.827234 seconds of total run time (2.827234 user, 0.000000 system)
  99.82% CPU
  6,780,825,048 processor cycles
  2,000,016 bytes consed

Evaluation took:
  0.199 seconds of real time
  0.198204 seconds of total run time (0.198204 user, 0.000000 system)
  99.50% CPU
  475,382,718 processor cycles
  1,000,016 bytes consed

Evaluation took:
  0.285 seconds of real time
  0.284544 seconds of total run time (0.284544 user, 0.000000 system)
  100.00% CPU
  682,432,197 processor cycles
  998,016 bytes consed

#+end_example

* Linear and logistic regression

This is exercise 1 of the course. Gradient descent method is used to
minimise error function for linear regression of data in file
=ex1data1.txt= that is part of the exercise and can be found on-line.

This lisp source block generates coefficients =k= and =q= for best fit.
#+NAME: ex1-lr
#+BEGIN_SRC lisp :package regression :var file="~/src/machine-learning-course/ex1/ex1data1.txt"
(multiple-value-call #'get-lr-coefficients
  500 (read-comma-file file))
#+END_SRC

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="~/src/machine-learning-course/ex1/ex1data1.txt"
#+header: :var q=ex1-lr[0,0] :var k=ex1-lr[1,0]
#+BEGIN_SRC gnuplot :exports code :file file.svg :exports both
set xlabel "Population (in 10 000)"
set ylabel "Profit (in 10 000 USD)"
set key box linestyle -1 left top
plot file using "%lf,%lf\n" title "Training data",\
   q+k*x title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:file.svg]]
