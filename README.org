#+TITLE: Redoing ML exercises in CL

Some time ago, I took a course on ML with examples in
Octave/Matlab. This repository tries to redo the stuff in Common Lisp.

* Linear algebra
  :PROPERTIES:
  :ID:       22295238-7f56-45a2-bd78-d918c008b58b
  :END:
I need linear combinations and matrix (including row and column
vector) multiplication. I met quite a few LA libraries, some native,
some using FFI, and most of them is a bit too complicated. Also, I
wanted to get a feeling on speed of simple code.

So here is a simple implementation of some LA operations. The macro with-matrixes takes an matrix algebra expression such as ~(* A X)~ and generates code to prepare the matrix.

** Speed test
   :PROPERTIES:
   :ORDERED:  t
   :ID:       db78f098-a6c4-457e-84d6-6d6ec6601026
   :END:
This is speed test with current machine (HP notebook), sbcl,
 and safety level in the code 2

#+NAME: speed-test
#+header: :var rows=500 :var across=500
#+BEGIN_SRC lisp :package linear-algebra :var cols=500 type='single-float
  (let ((a (make-array `(,rows ,across) :element-type 'single-float
					:initial-element 0s0))
	(b (make-array `(,across cols) :element-type 'single-float
				       :initial-element 0s0)))

     (time-in-ms-as-real (regression::with-matrixes (* a b) :declarations nil)))
#+END_SRC

#+RESULTS: speed-test
: 218.0

The speeds for individual table types and sizes are like this on my machine:
#+NOTE: Use C-c* to recalculate
#+TBLNAME:
| rows | across | cols | time (ms) |  per-ms |
|------+--------+------+-----------+---------|
|  500 |    500 |  500 |     366.0 |  341530 |
|------+--------+------+-----------+---------|
|  100 |    100 |  100 |       1.0 | 1000000 |
|  200 |    200 |  200 |      15.0 |  533333 |
|  400 |    400 |   10 |       3.0 |  533333 |
|  400 |    400 |   20 |       5.0 |  640000 |
|  400 |    400 |   40 |       9.0 |  711111 |
|  400 |    400 |  100 |      25.0 |  640000 |
|  400 |    400 |  200 |      52.0 |  615385 |
|  400 |    400 |  400 |     102.0 |  627451 |
|  400 |    400 | 1000 |     264.0 |  606061 |
|  400 |    400 | 2000 |     583.0 |  548885 |
|------+--------+------+-----------+---------|
#+TBLFM: $4='(org-sbe speed-test (cols $3) (rows $1) (across $2))::$5=round($1*$2*$3/$4)

It appears to provide relatively stable number of (rows*cols*across)
field in the tested ranges for floats.


* Linear regression in one variable

This is exercise 1 of the course. Gradient descent method is used to
minimise cost function for linear regression.
| Function                     | Docstring (first line)                                                          |
|------------------------------+---------------------------------------------------------------------------------|
| linear-estimate              | Linear regression estimate given coefficients A and independent variables X.    |
| linear-grad-A                | Gradient of error of linear cost function.                                      |
|------------------------------+---------------------------------------------------------------------------------|
| linear-regression-iteration  | Update matrix with linear regression coeficients to better match observed data. |
| linear-regression-iterations | Run COUNT linear iterations, optionally logging error(s).                       |
|------------------------------+---------------------------------------------------------------------------------|
#+TBLFM: $2='(sly-eval '(cl:let ((line (cl:documentation (cl:intern (cl:string-upcase $1) 'REGRESSION) 'cl:function))) (cl:subseq line 0 (cl:position ?\^J line :key 'cl:char-code))))

Key function is =linear-regression-iterations= that has docstring
#+BEGIN_SRC lisp :package regression :exports results
(documentation #'linear-regression-iterations t)
#+END_SRC

#+RESULTS:
: Run count linear iterations, optionally logging cost function.
:
: The cost function is 1/m Σ ‖y-yʹ‖₂ + ½αΣ‖A‖₂, where =m= is the batch
: size, =α= is a regularization parameter, ‖u‖₂is sum of squares of the
: elements of matrix u (i.e., =Tr uᵀu=), and =σ= determines speed of
: gradient descent (higher is better until it starts to oscilate).

** Example 1
The goal is a linear regression of data in file =ex1data1.txt= that is
part of the exercise and can be found on-line

Following lisp source block generates coefficients =k= and =q= for best fit.
#+NAME: ex1-lr
#+BEGIN_SRC lisp :package regression :var datafile="/opt/compressed/git/machine-learning-course/ex1/ex1data1.txt"
(multiple-value-call #'linear-get-coefficients (read-comma-file datafile))
#+END_SRC

#+RESULTS: ex1-lr
| -3.8957644 | 1.1930298 |

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="/opt/compressed/git/machine-learning-course/ex1/ex1data1.txt"
#+header: :var q=ex1-lr[0,0] :var k=ex1-lr[1,0]
#+BEGIN_SRC gnuplot :exports code :file ex1data1.svg :exports both
set title "Training data with a linear fit"
set yrange [*:*]
set xrange [*:*]
set xlabel "Population (in 10 000)"
set ylabel "Profit (in 10 000 USD)"
set key box linestyle -1 left top
plot file using "%lf,%lf\n" title "Training data",\
   q+k*x title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:ex1data1.svg]]

* Multiple variable LR
Actually, original point of the second part of example 1 was to
introduce normalization of the data set. This was not done so far.

#+NAME: ex1data2
#+BEGIN_SRC lisp :package regression :var file="/opt/compressed/git/machine-learning-course/ex1/ex1data2.txt"
  (multiple-value-call #'linear-get-coefficients
   (read-comma-file file) :sigma -1.25e-2)
#+END_SRC

#+RESULTS: ex1data2
| 89597.08 | 139.21028 | -8737.767 |

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="/opt/compressed/git/machine-learning-course/ex1/ex1data2.txt"
#+header: :var q=ex1data2[0,0] :var k1=ex1data2[1,0] :var k2=ex1data2[2,0]
#+BEGIN_SRC gnuplot :exports code :file ex1data2.svg :exports both
set xlabel "Size"
set ylabel "Rooms"
set zlabel "Cost"
set view 110,15
set key bo
x linestyle -1 left top
splot file using "%lf,%lf,%lf\n" title "Training data",\
   q+k1*x+k2*y title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:ex1data2.svg]]

* Logistic
#+NAME: ex2data1
#+BEGIN_SRC lisp :package regression :var file="/opt/compressed/git/machine-learning-course/ex2/ex2data1.txt"
  (with-open-file (out "lrs.txt" :direction :output :if-exists :supersede)
    (multiple-value-call #'logistic-get-coefficients (read-comma-file2 file)
      :sigma -0.99 :alpha 1e-4 :out out))
#+END_SRC

#+RESULTS: ex2data1
| 5.0851736 | -0.045614056 | 0.27971417 | -1098.0603 |

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="/opt/compressed/git/machine-learning-course/ex2/ex2data1.txt"
#+header: :var q=ex2data1[0,0] :var k1=ex2data1[1,0] :var k2=ex2data1[2,0]
#+header: :var k3=ex2data1[3,0]
#+BEGIN_SRC gnuplot :exports code :file ex2data1.svg :exports both
set key box linestyle -1 right top
set title "Training data with decision boundary"
set xlabel "Exam 1 score"
set ylabel "Exam 2 score"
set yrange [*:*]
set xrange [*:*]
plot file using 1:($3 == 1 ? $2 : 1/0) "%lf,%lf,%lf\n" title "Admitted",\
   file using 1:($3 == 0 ? $2 : 1/0) "%lf,%lf,%lf\n" title "Not admitted", \
   (-q-k1*x-k3/x)/k2 title "Boundary"
#+END_SRC

#+RESULTS:
[[file:ex2data1.svg]]
Convergency graph:
#+BEGIN_SRC gnuplot :exports code :file lrs.svg :exports both :var file="lrs.txt"
set yrange [0:*]
set xrange [0:*]
set xlabel "Iteration"
set ylabel "Normalized error costs"
set title "Cost after iterations"
set key box linestyle -1 right top
plot file u 1 w lines title "Error cost", \
  file u 2 w lines title "A² cost", \
  file u 3 w lines title "Total cost"
#+END_SRC

#+RESULTS:
[[file:lrs.svg]]

* Speed of regression

Before trying to speed up the regression, lets us measure how long it
takes and how much it conses.
#+BEGIN_SRC lisp :package regression :var file="ex2data1.txt"
  (with-output-to-string (*trace-output*)
    (time
     (multiple-value-call #'logistic-get-coefficients
       (read-comma-file2 file)
       :sigma -1s0 :alpha 0.0001)))
#+END_SRC

#+RESULTS:
: Evaluation took:
:   0.026 seconds of real time
:   0.025790 seconds of total run time (0.025720 user, 0.000070 system)
:   100.00% CPU
:   77,313,725 processor cycles
:   97,968 bytes consed
:

* Testing sigma values
  :PROPERTIES:
  :ID:       56ce1f87-af8b-43f6-bad0-bf7c4d74a9f3
  :END:
Generate file with errors of the regression for different sigmas.
#+header: :results none
#+BEGIN_SRC lisp :package regression :var file="ex2data1.txt"
  (with-open-file (out "/tmp/sigmas.txt" :direction :output :if-exists :supersede)
    (dolist (sigma '(-0.1 -0.3 -0.1 -3.0 -10.0))
      (format out "~3&~a~%" sigma)
      (multiple-value-call #'logistic-get-coefficients (read-comma-file2 file)
	:sigma sigma :alpha 1e-4 :out out)))
#+END_SRC

#+BEGIN_SRC gnuplot :exports code :file err.svg :exports both :var file="/tmp/sigmas.txt"
set yrange [0:*]
set xrange [*:*]
set key box linestyle -1 left bottom columnheader
plot for [IDX=0:4] file i IDX u 1 w lines title columnheader(1)
#+END_SRC

#+RESULTS:
[[file:err.svg]]
#+BEGIN_SRC gnuplot :exports code :file err-both.svg :exports both :var file="/tmp/sigmas.txt"
set yrange [0:*]
set xrange [*:*]
set key box linestyle -1 left bottom
plot for [IDX=0:4] file i IDX u 3 w lines title columnheader(1)
#+END_SRC

#+RESULTS:
[[file:err-both.svg]]


* Emacs/Org notes
Some employed in this file
- Use org-table functions to get [[id:22295238-7f56-45a2-bd78-d918c008b58b][docstring of the Lisp functions]] and fill in [[id:db78f098-a6c4-457e-84d6-6d6ec6601026][multiplication speed]]
- Gnuplot technique to [[id:56ce1f87-af8b-43f6-bad0-bf7c4d74a9f3][plot several data parts]] of file is new to me


* BUGS/next steps
- [ ] Do not regularize A_0 (why?)


* Emacs/Org notes
Some techniques employed in this file:
- Use org-table functions to get [[id:22295238-7f56-45a2-bd78-d918c008b58b][docstring of the Lisp functions]] and
  fill in [[id:db78f098-a6c4-457e-84d6-6d6ec6601026][multiplication speed]]
- Gnuplot technique to [[id:56ce1f87-af8b-43f6-bad0-bf7c4d74a9f3][plot several data parts]] of file is new to me

#+BEGIN_SRC gnuplot :file f.png :var   file="~/src/machine-learning-course/ex2/ex2data1.txt"
set yrange [*:*]
set xrange [*:*]
set contour
set view map
set cntrparam levels discrete 0
set isosamples 9,9
splot x*x+100*y*y-900, \
      file using 1:($3 == 0 ? $2 : 1/0) "%lf,%lf,%lf\n" title "Not admitted", \
unset contour
#+END_SRC

#+RESULTS:
[[file:f.png]]
