#+TITLE: Redoing ML exercises in CL

Some time ago, I took a course on ML with examples in
Octave/Matlab. This repository tries to redo the stuff in Common Lisp.

* Linear algebra
I need linear combinations and matrix (including
   row and column vector) multiplication. I met quite a few LA
   libraries, some native, some using FFI, and most of them is a bit
   too complicated. Also, I wanted to get a feeling on speed of simple
   code.

** Speed test
   :PROPERTIES:
   :ORDERED:  t
   :END:
This is speed test with current machine (HP notebook), sbcl,
 and safety level in the code 2

#+NAME: speed-test
#+header: :var rows=500 :var across=500
#+BEGIN_SRC lisp :package linear-algebra :var type="SINGLE-FLOAT" :var cols=500
  (let ((a (make-array `(,rows ,across) :element-type type
					:initial-element 0s0))
	(b (make-array `(,across cols) :element-type type
				       :initial-element 0s0)))
  
     (time-in-ms-as-real (times a b)))
#+END_SRC

The speeds for individual table types and sizes are like this on my machine:
#+TBLNAME:
| rows | across | cols | element-type | time (ms) | per-ms |
|------+--------+------+--------------+-----------+--------|
|  500 |    500 |  500 | single-float |     382.0 | 327225 |
|------+--------+------+--------------+-----------+--------|
|  100 |    100 |  100 | single-float |       8.0 | 125000 |
|  200 |    200 |  200 | single-float |      50.0 | 160000 |
|  400 |    400 |   10 | single-float |      11.0 | 145455 |
|  400 |    400 |   20 | single-float |      20.0 | 160000 |
|  400 |    400 |   40 | single-float |      40.0 | 160000 |
|  400 |    400 |  100 | single-float |      98.0 | 163265 |
|  400 |    400 |  200 | single-float |     199.0 | 160804 |
|  400 |    400 |  400 | single-float |     439.0 | 145786 |
|  400 |    400 | 1000 | single-float |    1033.0 | 154889 |
|  400 |    400 | 2000 | single-float |    2079.0 | 153920 |
|------+--------+------+--------------+-----------+--------|
|  400 |    400 |   50 | t            |     289.0 |  27682 |
#+TBLFM: $5='(org-sbe speed-test (type '$4) (cols $3) (rows $1) (across $2))::$6=round($1*$2*$3/$5)

It appears to provide relatively stable number of (rows*cols*across)
field in the tested ranges for floats.

* Linear regression in one variable

This is exercise 1 of the course. Gradient descent method is used to
minimise error function for linear regression of data in file
=ex1data1.txt= that is part of the exercise and can be found on-line.

This lisp source block generates coefficients =k= and =q= for best fit.
#+NAME: ex1-lr
#+BEGIN_SRC lisp :package regression :var file="~/src/machine-learning-course/ex1/ex1data1.txt"
(multiple-value-call #'get-lr-coefficients
  500 (read-comma-file file))
#+END_SRC

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="~/src/machine-learning-course/ex1/ex1data1.txt"
#+header: :var q=ex1-lr[0,0] :var k=ex1-lr[1,0]
#+BEGIN_SRC gnuplot :exports code :file ex1data1.svg :exports both
set xlabel "Population (in 10 000)"
set ylabel "Profit (in 10 000 USD)"
set key box linestyle -1 left top
plot file using "%lf,%lf\n" title "Training data",\
   q+k*x title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:ex1data1.svg]]

* Multiple variable LR
Actually, original point of the second part of example 1 was to
introduce normalization of the data set. This was not done so far.

#+NAME: ex1data2
#+BEGIN_SRC lisp :package regression :var file="~/src/machine-learning-course/ex1/ex1data2.txt"
(multiple-value-call #'get-lr-coefficients
  500 (read-comma-file file) :sigma -1.25e-2)
#+END_SRC

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="~/src/machine-learning-course/ex1/ex1data2.txt"
#+header: :var q=ex1data2[0,0] :var k1=ex1data2[1,0] :var k2=ex1data2[2,0]
#+BEGIN_SRC gnuplot :exports code :file ex1data2.svg :exports both
set xlabel "Size"
set ylabel "Rooms"
set zlabel "Cost"
set view 110,15
set key box linestyle -1 left top
splot file using "%lf,%lf,%lf\n" title "Training data",\
   q+k1*x+k2*y title "Linear regression"
#+END_SRC

#+RESULTS:
[[file:ex1data2.svg]]

* Logistic 
#+NAME: ex2data1
#+BEGIN_SRC lisp :package regression :var file="~/src/machine-learning-course/ex2/ex2data1.txt"
(multiple-value-call #'get-log-coefficients
  3000 (read-comma-file file))
#+END_SRC

#+RESULTS: ex2data1
| -21.747768 | 0.1885916 | 0.16767454 |

The coefficients are used by the gnuplot to draw the line agains data points.
#+header: :var file="~/src/machine-learning-course/ex2/ex2data1.txt"
#+header: :var q=ex2data1[0,0] :var k1=ex2data1[1,0] :var k2=ex2data1[2,0]
#+BEGIN_SRC gnuplot :exports code :file ex2data1.svg :exports both
set key box linestyle -1 left bottom
plot file using 1:($3 == 1 ? $2 : 1/0) "%lf,%lf,%lf\n" title "1",\
   file using 1:($3 == 0 ? $2 : 1/0) "%lf,%lf,%lf\n" title "0", \
   (-q-k1*x)/k2
#+END_SRC

#+RESULTS:
[[file:ex2data1.svg]]

* BUGS/next steps
- [X] (check-logistic): parameter args added but not used
- [ ] Linear combination being destructive is counterintuitive. Rename
  to update and define true non-destructive combination
- [X] Normalization of X is missing
- [X] Better optimizer for logistic example <- fixed a bit by scaling
- [ ] Do not regularize A_0 (why?)
